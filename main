import React, { useState } from 'react';
import { DollarSign, AlertTriangle, TrendingUp, Clock, Users, Calculator, BarChart, Table } from 'lucide-react';
import uxText from './uxText.json'; // Import the JSON file containing all UX text

const COBLCalculator = () => {
  const [step, setStep] = useState(0); // Start at 0 for homepage
  const [formData, setFormData] = useState({
    industry: '',
    teamSize: '',
    monthlyBusinessValue: '',
    businessValueType: '', // 'profit' or 'savings'
    includeTeamBurn: true,
    productLife: '',
    customerLossMonth: '',
    customerLossValue: '',
    otherCostMonth: '',
    otherCostValue: ''
  });
  const [results, setResults] = useState(null);
  const [isCalculating, setIsCalculating] = useState(false);
  const [viewMode, setViewMode] = useState('summary'); // 'summary', 'table', 'graph'

  const industries = [
    'Biotech/Pharmaceutical', 'Financial Technology', 'Software/SaaS', 
    'Hardware/Electronics', 'Semiconductor', 'Industrial Technology', 
    'Energy/Cleantech', 'Other'
  ];

  const industryDefaults = {
    'Biotech/Pharmaceutical': { discountRate: 14, rampMonths: 4, costPerPerson: 12000 },
    'Financial Technology': { discountRate: 11, rampMonths: 3, costPerPerson: 15000 },
    'Software/SaaS': { discountRate: 12, rampMonths: 3, costPerPerson: 13000 },
    'Hardware/Electronics': { discountRate: 10, rampMonths: 6, costPerPerson: 11000 },
    'Semiconductor': { discountRate: 13, rampMonths: 8, costPerPerson: 14000 },
    'Industrial Technology': { discountRate: 10, rampMonths: 6, costPerPerson: 12000 },
    'Energy/Cleantech': { discountRate: 9, rampMonths: 8, costPerPerson: 10000 },
    'Other': { discountRate: 10, rampMonths: 4, costPerPerson: 12000 }
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const calculateCOBL = async () => {
    setIsCalculating(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const monthlyBusinessValue = parseInt(formData.monthlyBusinessValue) || 1000000;
      const productLife = parseInt(formData.productLife) || 36;
      const teamSize = parseInt(formData.teamSize) || 0;
      const includeTeamBurn = formData.includeTeamBurn && teamSize > 0;
      const customerLossMonth = parseInt(formData.customerLossMonth) || 0;
      const customerLossValue = parseInt(formData.customerLossValue) || 0;
      const otherCostMonth = parseInt(formData.otherCostMonth) || 0;
      const otherCostValue = parseInt(formData.otherCostValue) || 0;
      
      // Use industry defaults
      const defaults = industryDefaults[formData.industry] || industryDefaults['Other'];
      const discountRate = defaults.discountRate;
      const rampMonths = defaults.rampMonths;
      const teamBurnRate = includeTeamBurn ? (teamSize * defaults.costPerPerson) : 0;
      
      const results = calculateCOBLOverTime({
        monthlyBusinessValue,
        businessValueType: formData.businessValueType,
        productLife,
        rampMonths,
        teamBurnRate,
        discountRate,
        customerLossMonth,
        customerLossValue,
        otherCostMonth,
        otherCostValue,
        includeTeamBurn
      });
      
      setResults(results);
      setIsCalculating(false);
      setStep(3);
    } catch (error) {
      console.error('Calculation error:', error);
      setIsCalculating(false);
    }
  };

  const calculateCOBLOverTime = (params) => {
    const {
      monthlyBusinessValue, businessValueType, productLife, rampMonths, teamBurnRate, discountRate,
      customerLossMonth = 0, customerLossValue = 0, otherCostMonth = 0, otherCostValue = 0, includeTeamBurn = true
    } = params;
    
    const monthlyDiscountRate = discountRate / 100 / 12;
    
    // Calculate NPV for different delay scenarios
    const calculateNPV = (delayMonths) => {
      let npv = 0;
      for (let month = 1; month <= productLife; month++) {
        const effectiveMonth = month + delayMonths;
        
        // For profit projects, apply ramp period; for savings projects, immediate value
        let value;
        if (businessValueType === 'profit') {
          value = month <= rampMonths ? (monthlyBusinessValue * (month / rampMonths)) : monthlyBusinessValue;
        } else {
          value = monthlyBusinessValue; // Savings start immediately when deployed
        }
        
        const discountFactor = Math.pow(1 + monthlyDiscountRate, -effectiveMonth);
        npv += value * discountFactor;
      }
      return npv;
    };

    const onTimeNPV = calculateNPV(0);
    const monthlyData = [];
    
    // Calculate cost for each month of delay (0 to 12 months)
    for (let delayMonths = 0; delayMonths <= 12; delayMonths++) {
      const delayedNPV = calculateNPV(delayMonths);
      const lostBusinessValue = onTimeNPV - delayedNPV;
      const additionalBurn = teamBurnRate * delayMonths;
      
      const linearCosts = lostBusinessValue + additionalBurn;
      
      // Simple non-linear costs based on user input
      let nonLinearCosts = 0;
      if (delayMonths >= customerLossMonth && customerLossMonth > 0) {
        nonLinearCosts += customerLossValue;
      }
      if (delayMonths >= otherCostMonth && otherCostMonth > 0) {
        nonLinearCosts += otherCostValue;
      }
      
      const totalCost = linearCosts + nonLinearCosts;
      
      monthlyData.push({
        month: delayMonths,
        lostBusinessValue: Math.round(lostBusinessValue),
        additionalBurn: Math.round(additionalBurn),
        linearCosts: Math.round(linearCosts),
        nonLinearCosts: Math.round(nonLinearCosts),
        totalCost: Math.round(totalCost),
        monthlyCost: delayMonths > 0 ? Math.round(totalCost / delayMonths) : 0
      });
    }

    return {
      onTimeNPV: Math.round(onTimeNPV),
      productLife,
      rampMonths,
      discountRate,
      businessValueType,
      monthlyData,
      summary: {
        oneMonthCost: monthlyData[1]?.totalCost || 0,
        threeMonthCost: monthlyData[3]?.totalCost || 0,
        sixMonthCost: monthlyData[6]?.totalCost || 0,
        twelveMonthCost: monthlyData[12]?.totalCost || 0
      },
      params: { ...params, monthlyBusinessValue }
    };
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const renderSimpleForm = () => {
    if (step === 1) {
      return (
        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {uxText.step1.title}
            </h2>
            <p className="text-gray-600">
              {uxText.step1.subtitle}
            </p>
          </div>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {uxText.step1.labels.industry}
              </label>
              <select 
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={formData.industry}
                onChange={(e) => handleInputChange('industry', e.target.value)}
              >
                <option value="">{uxText.step1.placeholders.industry}</option>
                {industries.map(industry => (
                  <option key={industry} value={industry}>{industry}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {uxText.step1.labels.monthlyBusinessValue}
              </label>
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-3">
                <p className="text-sm text-yellow-800">
                  <strong>{uxText.step1.messages.important}</strong> {uxText.step1.messages.businessValueNote}
                </p>
              </div>
              <div className="space-y-3">
                <div>
                  <label className="block text-sm text-gray-600 mb-2">
                    {uxText.step1.labels.businessValueType}
                  </label>
                  <select 
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    value={formData.businessValueType}
                    onChange={(e) => handleInputChange('businessValueType', e.target.value)}
                  >
                    <option value="">{uxText.step1.placeholders.businessValueType}</option>
                    <option value="profit">{uxText.step1.options.profit}</option>
                    <option value="savings">{uxText.step1.options.savings}</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm text-gray-600 mb-2">
                    {formData.businessValueType === 'profit' ? 
                      uxText.step1.labels.monthlyProfit : 
                      formData.businessValueType === 'savings' ?
                      uxText.step1.labels.monthlySavings :
                      uxText.step1.labels.monthlyBusinessValue}
                  </label>
                  <input 
                    type="number"
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder={uxText.step1.placeholders.monthlyBusinessValue}
                    value={formData.monthlyBusinessValue}
                    onChange={(e) => handleInputChange('monthlyBusinessValue', e.target.value)}
                  />
                  <p className="text-sm text-gray-500 mt-1">
                    {formData.businessValueType === 'profit' ? 
                      uxText.step1.helpTexts.profit : 
                      formData.businessValueType === 'savings' ?
                      uxText.step1.helpTexts.savings :
                      uxText.step1.helpTexts.businessValue}
                  </p>
                </div>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {uxText.step1.labels.productLife}
              </label>
              <input 
                type="number"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder={uxText.step1.placeholders.productLife}
                value={formData.productLife}
                onChange={(e) => handleInputChange('productLife', e.target.value)}
              />
              <p className="text-sm text-gray-500 mt-1">
                {uxText.step1.helpTexts.productLife}
              </p>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
              <h3 className="font-medium text-blue-900 mb-2">{uxText.step1.sections.teamCost.title}</h3>
              <p className="text-sm text-blue-800">
                <strong>{uxText.step1.sections.teamCost.note}</strong> {uxText.step1.sections.teamCost.description}
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {uxText.step1.labels.teamSize}
              </label>
              <input 
                type="number"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder={uxText.step1.placeholders.teamSize}
                value={formData.teamSize}
                onChange={(e) => handleInputChange('teamSize', e.target.value)}
              />
              <p className="text-sm text-gray-500 mt-1">
                {uxText.step1.helpTexts.teamSize}
              </p>
            </div>

            <div className="p-4 border border-gray-200 rounded-lg">
              <label className="flex items-center space-x-3">
                <input 
                  type="checkbox"
                  checked={formData.includeTeamBurn}
                  onChange={(e) => handleInputChange('includeTeamBurn', e.target.checked)}
                  className="h-5 w-5 text-blue-600"
                />
                <div>
                  <div className="font-medium">{uxText.step1.labels.includeTeamBurn}</div>
                  <div className="text-sm text-gray-600">
                    {uxText.step1.helpTexts.includeTeamBurn}
                  </div>
                </div>
              </label>
            </div>
          </div>

          <button 
            onClick={() => setStep(2)}
            disabled={!formData.industry || !formData.monthlyBusinessValue || !formData.businessValueType || !formData.productLife}
            className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
          >
            {uxText.step1.buttons.continue}
          </button>
        </div>
      );
    }

    if (step === 2) {
      return (
        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {uxText.step2.title}
            </h2>
            <p className="text-gray-600">
              {uxText.step2.subtitle}
            </p>
          </div>

          <div className="space-y-6">
            {/* Customer Loss Question */}
            <div className="p-4 border border-gray-200 rounded-lg">
              <h3 className="font-medium text-gray-900 mb-3">
                {uxText.step2.sections.customerLoss.title}
              </h3>
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {uxText.step2.labels.customerLossMonth}
                  </label>
                  <input 
                    type="number"
                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder={uxText.step2.placeholders.customerLossMonth}
                    value={formData.customerLossMonth}
                    onChange={(e) => handleInputChange('customerLossMonth', e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {uxText.step2.labels.customerLossValue}
                  </label>
                  <input 
                    type="number"
                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder={uxText.step2.placeholders.customerLossValue}
                    value={formData.customerLossValue}
                    onChange={(e) => handleInputChange('customerLossValue', e.target.value)}
                  />
                </div>
              </div>
            </div>

            {/* Other Critical Cost Question */}
            <div className="p-4 border border-gray-200 rounded-lg">
              <h3 className="font-medium text-gray-900 mb-3">
                {uxText.step2.sections.otherCost.title}
              </h3>
              <div className="mb-3 text-sm text-gray-600">
                <strong>{uxText.step2.sections.otherCost.examplesTitle}</strong> {uxText.step2.sections.otherCost.examples}
              </div>
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {uxText.step2.labels.otherCostMonth}
                  </label>
                  <input 
                    type="number"
                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder={uxText.step2.placeholders.otherCostMonth}
                    value={formData.otherCostMonth}
                    onChange={(e) => handleInputChange('otherCostMonth', e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    {uxText.step2.labels.otherCostValue}
                  </label>
                  <input 
                    type="number"
                    className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder={uxText.step2.placeholders.otherCostValue}
                    value={formData.otherCostValue}
                    onChange={(e) => handleInputChange('otherCostValue', e.target.value)}
                  />
                </div>
              </div>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="text-sm text-blue-800">
                <strong>{uxText.step2.messages.linearCostsTitle}</strong> {uxText.step2.messages.linearCostsDescription}
              </div>
            </div>
          </div>

          <div className="flex space-x-4">
            <button 
              onClick={() => setStep(1)}
              className="flex-1 bg-gray-200 text-gray-800 py-3 px-6 rounded-lg font-medium hover:bg-gray-300 transition-colors"
            >
              {uxText.step2.buttons.back}
            </button>
            <button 
              onClick={calculateCOBL}
              className="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 transition-colors"
            >
              {uxText.step2.buttons.calculate}
            </button>
          </div>
        </div>
      );
    }
  };

  const renderResults = () => {
    if (!results) return null;

    if (viewMode === 'summary') {
      return (
        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {uxText.results.summary.title}
            </h2>
            <p className="text-gray-600">
              {uxText.results.summary.subtitle.replace('{value}', formatCurrency(results.params.monthlyBusinessValue)).replace('{type}', results.businessValueType === 'profit' ? 'profit' : 'cost savings').replace('{life}', results.productLife)}
            </p>
          </div>

          {/* Quick Summary Cards */}
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="text-sm text-yellow-700 font-medium">{uxText.results.summary.cards.oneMonth}</div>
              <div className="text-2xl font-bold text-yellow-800">{formatCurrency(results.summary.oneMonthCost)}</div>
            </div>
            <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
              <div className="text-sm text-orange-700 font-medium">{uxText.results.summary.cards.threeMonths}</div>
              <div className="text-2xl font-bold text-orange-800">{formatCurrency(results.summary.threeMonthCost)}</div>
            </div>
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="text-sm text-red-700 font-medium">{uxText.results.summary.cards.sixMonths}</div>
              <div className="text-2xl font-bold text-red-800">{formatCurrency(results.summary.sixMonthCost)}</div>
            </div>
            <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <div className="text-sm text-purple-700 font-medium">{uxText.results.summary.cards.twelveMonths}</div>
              <div className="text-2xl font-bold text-purple-800">{formatCurrency(results.summary.twelveMonthCost)}</div>
            </div>
          </div>

          {/* Risk Up Front Calculation Assumptions */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
            <h3 className="text-lg font-bold text-gray-900 mb-4">
              {uxText.results.summary.sections.assumptions.title}
            </h3>
            <div className="mb-4 text-sm text-blue-800">
              <strong>{uxText.results.summary.sections.assumptions.note}</strong> {uxText.results.summary.sections.assumptions.description}
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <div className="font-medium text-gray-900">{uxText.results.summary.sections.assumptions.industryTitle}: {formData.industry}</div>
                <ul className="mt-2 space-y-1 text-gray-700">
                  <li>• {uxText.results.summary.sections.assumptions.discountRate}: {results.discountRate}% {uxText.results.summary.sections.assumptions.annually}</li>
                  <li>• {results.businessValueType === 'profit' ? uxText.results.summary.sections.assumptions.revenueRamp : uxText.results.summary.sections.assumptions.deploymentPeriod}: {results.rampMonths} {uxText.results.summary.sections.assumptions.months}</li>
                  {results.params.includeTeamBurn && <li>• {uxText.results.summary.sections.assumptions.teamCost}: {formatCurrency(industryDefaults[formData.industry]?.costPerPerson || 12000)}/{uxText.results.summary.sections.assumptions.personMonth}</li>}
                </ul>
              </div>
              <div>
                <div className="font-medium text-gray-900">{uxText.results.summary.sections.assumptions.projectTitle}</div>
                <ul className="mt-2 space-y-1 text-gray-700">
                  <li>• {uxText.results.summary.sections.assumptions.monthlyValue}: {formatCurrency(results.params.monthlyBusinessValue)}</li>
                  <li>• {uxText.results.summary.sections.assumptions.productLifetime}: {results.productLife} {uxText.results.summary.sections.assumptions.months}</li>
                  {results.params.includeTeamBurn && <li>• {uxText.results.summary.sections.assumptions.teamSize}: {parseInt(formData.teamSize)} {uxText.results.summary.sections.assumptions.people}</li>}
                  {results.params.customerLossMonth > 0 && <li>• {uxText.results.summary.sections.assumptions.customerLoss}: {uxText.results.summary.sections.assumptions.month} {results.params.customerLossMonth} ({formatCurrency(results.params.customerLossValue)})</li>}
                  {results.params.otherCostMonth > 0 && <li>• {uxText.results.summary.sections.assumptions.otherCriticalCost}: {uxText.results.summary.sections.assumptions.month} {results.params.otherCostMonth} ({formatCurrency(results.params.otherCostValue)})</li>}
                </ul>
              </div>
            </div>
          </div>

          {/* Key Insights */}
          <div className="bg-green-50 border border-green-200 rounded-lg p-6">
            <h3 className="text-lg font-bold text-gray-900 mb-4">
              {uxText.results.summary.sections.insights.title}
            </h3>
            <ul className="space-y-2 text-sm">
              <li className="flex items-start space-x-2">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-1.5"></div>
                <span><strong>{uxText.results.summary.sections.insights.linearCostPerMonth}:</strong> {uxText.results.summary.sections.insights.approximately} {formatCurrency(results.monthlyData[1]?.monthlyCost || 0)}</span>
              </li>
              <li className="flex items-start space-x-2">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-1.5"></div>
                <span><strong>{uxText.results.summary.sections.insights.nonLinearCosts}:</strong> {
                  (() => {
                    const firstNonLinear = results.monthlyData.find(d => d.nonLinearCosts > 0);
                    if (firstNonLinear) {
                      return `${uxText.results.summary.sections.insights.activateAfter} ${firstNonLinear.month} ${uxText.results.summary.sections.insights.months} (${uxText.results.summary.sections.insights.stepFunctionImpact})`;
                    } else {
                      return uxText.results.summary.sections.insights.noneIdentified;
                    }
                  })()
                }</span>
              </li>
              <li className="flex items-start space-x-2">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-1.5"></div>
                <span><strong>{uxText.results.summary.sections.insights.totalValueAtRisk}:</strong> {formatCurrency(results.onTimeNPV)}</span>
              </li>
            </ul>
          </div>

          {/* Integrated Graph */}
          <div className="bg-white p-6 rounded-lg border">
            <h3 className="text-lg font-bold text-gray-900 mb-4">
              {uxText.results.graph.title}
            </h3>
            <div className="relative" style={{ height: `${300 + 60}px` }}>
              {/* Y-axis labels */}
              <div className="absolute left-0 top-0 h-full flex flex-col justify-between text-xs text-gray-500 pr-2">
                <span>{formatCurrency(Math.max(...results.monthlyData.map(d => d.totalCost)))}</span>
                <span>{formatCurrency(Math.max(...results.monthlyData.map(d => d.totalCost)) * 0.75)}</span>
                <span>{formatCurrency(Math.max(...results.monthlyData.map(d => d.totalCost)) * 0.5)}</span>
                <span>{formatCurrency(Math.max(...results.monthlyData.map(d => d.totalCost)) * 0.25)}</span>
                <span>$0</span>
              </div>
              
              {/* Chart area */}
              <div className="ml-20 mr-4">
                <div className="flex items-end justify-between h-80 border-l border-b border-gray-300">
                  {results.monthlyData.map((data, i) => {
                    const maxCost = Math.max(...results.monthlyData.map(d => d.totalCost));
                    const heightPercent = maxCost > 0 ? (data.totalCost / maxCost) * 100 : 0;
                    const barHeight = (heightPercent / 100) * 300;
                    
                    return (
                      <div key={i} className="flex flex-col items-center flex-1 mx-1">
                        {/* Value label on top */}
                        <div className="text-xs text-gray-600 mb-1 h-8 flex items-end">
                          {data.totalCost > 0 && formatCurrency(data.totalCost)}
                        </div>
                        
                        {/* Bar */}
                        <div className="w-full max-w-8 relative">
                          <div 
                            className={`w-full rounded-t transition-all duration-500 ${
                              i === 0 ? 'bg-green-500' : 
                              i <= 3 ? 'bg-yellow-500' : 
                              i <= 6 ? 'bg-orange-500' : 'bg-red-500'
                            }`}
                            style={{ 
                              height: `${barHeight}px`,
                              minHeight: data.totalCost > 0 ? '4px' : '0px'
                            }}
                          ></div>
                        </div>
                        
                        {/* Month label */}
                        <div className="text-xs text-gray-700 mt-2 font-medium">
                          {i === 0 ? uxText.results.graph.labels.onTime : `${data.month}m`}
                        </div>
                      </div>
                    );
                  })}
                </div>
                
                {/* X-axis label */}
                <div className="text-center text-sm text-gray-600 mt-4">
                  {uxText.results.graph.labels.monthsOfDelay}
                </div>
              </div>
            </div>

            {/* Legend */}
            <div className="grid grid-cols-2 gap-4 text-sm mt-4">
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-green-500 rounded"></div>
                <span>{uxText.results.graph.legend.onTime}</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-yellow-500 rounded"></div>
                <span>{uxText.results.graph.legend.oneToThreeMonths}</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-orange-500 rounded"></div>
                <span>{uxText.results.graph.legend.fourToSixMonths}</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-red-500 rounded"></div>
                <span>{uxText.results.graph.legend.sevenPlusMonths}</span>
              </div>
            </div>

            {/* Key Insights for Graph */}
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mt-4">
              <h4 className="font-medium text-gray-900 mb-2">{uxText.results.graph.sections.insights.title}</h4>
              <ul className="text-sm text-gray-700 space-y-1">
                <li>• <strong>{uxText.results.graph.sections.insights.nonLinearCosts}:</strong> {
                  (() => {
                    const customerMonth = results.params.customerLossMonth;
                    const otherMonth = results.params.otherCostMonth;
                    if (customerMonth > 0 && otherMonth > 0) {
                      return `${uxText.results.graph.sections.insights.createJumps} ${customerMonth} ${uxText.results.graph.sections.insights.and} ${otherMonth}`;
                    } else if (customerMonth > 0) {
                      return `${uxText.results.graph.sections.insights.createJump} ${customerMonth}`;
                    } else if (otherMonth > 0) {
                      return `${uxText.results.graph.sections.insights.createJump} ${otherMonth}`;
                    } else {
                      return uxText.results.graph.sections.insights.noneApplied;
                    }
                  })()
                }</li>
                {results.params.includeTeamBurn && <li>• <strong>{uxText.results.graph.sections.insights.linearTeamCosts}:</strong> {formatCurrency(results.params.teamBurnRate)}/{uxText.results.graph.sections.insights.perMonth}</li>}
                <li>• <strong>{uxText.results.graph.sections.insights.linearValueLoss}</strong> {uxText.results.graph.sections.insights.acceleratesWithDelays} {results.discountRate}% {uxText.results.graph.sections.insights.discountRate}</li>
              </ul>
            </div>
          </div>

          {/* Removed view toggle buttons from summary to make graph automatic */}
        </div>
      );
    }

    if (viewMode === 'table') {
      return (
        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {uxText.results.table.title}
            </h2>
            <button 
              onClick={() => setViewMode('summary')}
              className="text-blue-600 hover:underline"
            >
              {uxText.results.table.backToSummary}
            </button>
          </div>

          <div className="overflow-x-auto">
            <table className="w-full border-collapse border border-gray-300 text-sm">
              <thead>
                <tr className="bg-gray-50">
                  <th className="border border-gray-300 p-2 text-left">{uxText.results.table.headers.monthsLate}</th>
                  <th className="border border-gray-300 p-2 text-right">{uxText.results.table.headers.lostBusinessValue}</th>
                  {results.params.includeTeamBurn && <th className="border border-gray-300 p-2 text-right">{uxText.results.table.headers.linearTeamCosts}</th>}
                  <th className="border border-gray-300 p-2 text-right">{uxText.results.table.headers.linearCostSubtotal}</th>
                  <th className="border border-gray-300 p-2 text-right">{uxText.results.table.headers.nonLinearCosts}</th>
                  <th className="border border-gray-300 p-2 text-right font-bold">{uxText.results.table.headers.totalCost}</th>
                </tr>
              </thead>
              <tbody>
                {results.monthlyData.map((row, i) => (
                  <tr key={i} className={i % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td className="border border-gray-300 p-2 font-medium">{row.month}</td>
                    <td className="border border-gray-300 p-2 text-right">{formatCurrency(row.lostBusinessValue)}</td>
                    {results.params.includeTeamBurn && <td className="border border-gray-300 p-2 text-right">{formatCurrency(row.additionalBurn)}</td>}
                    <td className="border border-gray-300 p-2 text-right">{formatCurrency(row.linearCosts)}</td>
                    <td className="border border-gray-300 p-2 text-right">{formatCurrency(row.nonLinearCosts)}</td>
                    <td className="border border-gray-300 p-2 text-right font-bold text-red-600">{formatCurrency(row.totalCost)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      );
    }

    if (viewMode === 'graph') {
      return (
        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {uxText.results.graph.title}
            </h2>
            <button 
              onClick={() => setViewMode('summary')}
              className="text-blue-600 hover:underline"
            >
              {uxText.results.graph.backToSummary}
            </button>
          </div>

          <div className="bg-white p-6 rounded-lg border">
            <div className="relative" style={{ height: `${300 + 60}px` }}>
              {/* Y-axis labels */}
              <div className="absolute left-0 top-0 h-full flex flex-col justify-between text-xs text-gray-500 pr-2">
                <span>{formatCurrency(Math.max(...results.monthlyData.map(d => d.totalCost)))}</span>
                <span>{formatCurrency(Math.max(...results.monthlyData.map(d => d.totalCost)) * 0.75)}</span>
                <span>{formatCurrency(Math.max(...results.monthlyData.map(d => d.totalCost)) * 0.5)}</span>
                <span>{formatCurrency(Math.max(...results.monthlyData.map(d => d.totalCost)) * 0.25)}</span>
                <span>$0</span>
              </div>
              
              {/* Chart area */}
              <div className="ml-20 mr-4">
                <div className="flex items-end justify-between h-80 border-l border-b border-gray-300">
                  {results.monthlyData.map((data, i) => {
                    const maxCost = Math.max(...results.monthlyData.map(d => d.totalCost));
                    const heightPercent = maxCost > 0 ? (data.totalCost / maxCost) * 100 : 0;
                    const barHeight = (heightPercent / 100) * 300;
                    
                    return (
                      <div key={i} className="flex flex-col items-center flex-1 mx-1">
                        {/* Value label on top */}
                        <div className="text-xs text-gray-600 mb-1 h-8 flex items-end">
                          {data.totalCost > 0 && formatCurrency(data.totalCost)}
                        </div>
                        
                        {/* Bar */}
                        <div className="w-full max-w-8 relative">
                          <div 
                            className={`w-full rounded-t transition-all duration-500 ${
                              i === 0 ? 'bg-green-500' : 
                              i <= 3 ? 'bg-yellow-500' : 
                              i <= 6 ? 'bg-orange-500' : 'bg-red-500'
                            }`}
                            style={{ 
                              height: `${barHeight}px`,
                              minHeight: data.totalCost > 0 ? '4px' : '0px'
                            }}
                          ></div>
                        </div>
                        
                        {/* Month label */}
                        <div className="text-xs text-gray-700 mt-2 font-medium">
                          {i === 0 ? uxText.results.graph.labels.onTime : `${data.month}m`}
                        </div>
                      </div>
                    );
                  })}
                </div>
                
                {/* X-axis label */}
                <div className="text-center text-sm text-gray-600 mt-4">
                  {uxText.results.graph.labels.monthsOfDelay}
                </div>
              </div>
            </div>

            {/* Legend */}
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-green-500 rounded"></div>
                <span>{uxText.results.graph.legend.onTime}</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-yellow-500 rounded"></div>
                <span>{uxText.results.graph.legend.oneToThreeMonths}</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-orange-500 rounded"></div>
                <span>{uxText.results.graph.legend.fourToSixMonths}</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-red-500 rounded"></div>
                <span>{uxText.results.graph.legend.sevenPlusMonths}</span>
              </div>
            </div>

            {/* Key Insights */}
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <h4 className="font-medium text-gray-900 mb-2">{uxText.results.graph.sections.insights.title}</h4>
              <ul className="text-sm text-gray-700 space-y-1">
                <li>• <strong>{uxText.results.graph.sections.insights.nonLinearCosts}:</strong> {
                  (() => {
                    const customerMonth = results.params.customerLossMonth;
                    const otherMonth = results.params.otherCostMonth;
                    if (customerMonth > 0 && otherMonth > 0) {
                      return `${uxText.results.graph.sections.insights.createJumps} ${customerMonth} ${uxText.results.graph.sections.insights.and} ${otherMonth}`;
                    } else if (customerMonth > 0) {
                      return `${uxText.results.graph.sections.insights.createJump} ${customerMonth}`;
                    } else if (otherMonth > 0) {
                      return `${uxText.results.graph.sections.insights.createJump} ${otherMonth}`;
                    } else {
                      return uxText.results.graph.sections.insights.noneApplied;
                    }
                  })()
                }</li>
                {results.params.includeTeamBurn && <li>• <strong>{uxText.results.graph.sections.insights.linearTeamCosts}:</strong> {formatCurrency(results.params.teamBurnRate)}/{uxText.results.graph.sections.insights.perMonth}</li>}
                <li>• <strong>{uxText.results.graph.sections.insights.linearValueLoss}</strong> {uxText.results.graph.sections.insights.acceleratesWithDelays} {results.discountRate}% {uxText.results.graph.sections.insights.discountRate}</li>
              </ul>
            </div>
          </div>
        </div>
      );
    }
  };

  const resetCalculator = () => {
    setStep(0); // Reset to homepage
    setResults(null);
    setViewMode('summary');
    setFormData({
      industry: '',
      teamSize: '',
      monthlyBusinessValue: '',
      businessValueType: '',
      includeTeamBurn: true,
      productLife: '',
      customerLossMonth: '',
      customerLossValue: '',
      otherCostMonth: '',
      otherCostValue: ''
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Hero Section */}
      <div className="relative overflow-hidden">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24">
          <div className="text-center">
            <div className="flex items-center justify-center space-x-4 mb-8">
              <img src="/logo.png" alt="Celerity Consulting Group Logo" className="h-16 w-16" />
              <div>
                <h1 className="text-5xl font-bold text-gray-900 mb-4">
                  {uxText.header.title}
                </h1>
                <p className="text-xl text-gray-600 mb-2">
                  {uxText.header.subtitle}
                </p>
                <p className="text-lg text-gray-500">
                  {uxText.header.poweredBy}
                </p>
              </div>
            </div>
            
            <div className="max-w-3xl mx-auto">
              <p className="text-lg text-gray-700 mb-8">
                Discover the true cost of project delays with our advanced Risk Up Front methodology. Calculate linear and non-linear costs in under 60 seconds.
              </p>
              <button 
                onClick={() => setStep(1)}
                className="bg-blue-600 text-white px-8 py-4 rounded-lg font-semibold text-lg hover:bg-blue-700 transition-colors shadow-lg"
              >
                Start Your Risk Assessment
              </button>
            </div>
          </div>
        </div>
        
        {/* Background decoration */}
        <div className="absolute top-0 left-0 w-full h-full bg-white/10 backdrop-blur-sm -z-10"></div>
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-blue-200 rounded-full opacity-20 -z-10"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-indigo-200 rounded-full opacity-20 -z-10"></div>
      </div>

      {/* Content */}
      {!isCalculating && step > 0 && (
        <div className="max-w-4xl mx-auto px-4 py-16">
          <div className="bg-white rounded-lg shadow-xl p-8">
            {results ? renderResults() : renderSimpleForm()}
            
            {results && (
              <div className="mt-8 space-y-4">
                <button className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 transition-colors">
                  {uxText.results.buttons.downloadReport}
                </button>
                <div className="flex space-x-4">
                  <button className="flex-1 bg-green-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-green-700 transition-colors">
                    {uxText.results.buttons.scheduleAssessment}
                  </button>
                  <button 
                    onClick={resetCalculator}
                    className="flex-1 bg-gray-200 text-gray-800 py-3 px-6 rounded-lg font-medium hover:bg-gray-300 transition-colors"
                  >
                    {uxText.results.buttons.newCalculation}
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Loading State */}
      {isCalculating && (
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            {uxText.loading.title}
          </h3>
          <p className="text-gray-600">
            {uxText.loading.description.replace('{life}', formData.productLife || 36)}
          </p>
        </div>
      )}

      {/* Footer */}
      <div className="text-center mt-16 text-sm text-gray-500">
        <p>{uxText.footer.text}</p>
      </div>
    </div>
  );
};

export default COBLCalculator;